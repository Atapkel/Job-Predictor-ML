# Generated by Django 5.2.1 on 2025-05-11 14:15

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Education',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.CharField(choices=[('High School', 'High School'), ('Bachelor', 'Bachelor'), ('Master', 'Master'), ('PhD', 'PhD')], default='Bachelor', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='JobRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TrainedModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('model_type', models.CharField(choices=[('random_forest', 'Random Forest'), ('decision_tree', 'Decision Tree'), ('svm', 'Support Vector Machine'), ('knn', 'K-Nearest Neighbors'), ('logistic_regression', 'Logistic Regression')], max_length=50)),
                ('accuracy', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('model_file', models.FileField(upload_to='models/')),
                ('vectorizer_file', models.FileField(upload_to='models/')),
                ('scaler_file', models.FileField(upload_to='models/')),
                ('feature_names', models.JSONField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='JobPrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('skills_text', models.TextField(help_text='Enter your skills separated by commas (e.g., python, sql, machine learning)')),
                ('years_experience', models.FloatField(help_text='Years of experience in the field', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(50.0)])),
                ('education', models.CharField(choices=[('High School', 'High School'), ('Bachelor', 'Bachelor'), ('Master', 'Master'), ('PhD', 'PhD')], default='Bachelor', help_text='Your highest level of education', max_length=20)),
                ('has_certifications', models.BooleanField(default=False, help_text='Do you have relevant certifications?')),
                ('confidence', models.FloatField(blank=True, help_text='Confidence score for the prediction', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('alternative_roles', models.JSONField(blank=True, help_text='Alternative job roles with confidence scores', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('predicted_role', models.ForeignKey(help_text='The predicted job role', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='predictions', to='core.jobrole')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FeedbackForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback_type', models.CharField(blank=True, choices=[('accurate', 'This prediction is accurate'), ('partially_accurate', 'This prediction is partially accurate'), ('inaccurate', 'This prediction is inaccurate')], max_length=20, null=True)),
                ('additional_comments', models.TextField(blank=True, null=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('prediction', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='core.jobprediction')),
                ('correct_role', models.ForeignKey(blank=True, help_text='If the prediction was incorrect, what would be the correct role?', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='feedback_corrections', to='core.jobrole')),
            ],
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('associated_roles', models.ManyToManyField(blank=True, related_name='typical_skills', to='core.jobrole')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
    ]
